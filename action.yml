name: "FutureVuls Trivy Docker Image Scanner"
description: "Use this action to automatically create a lockfile in future-vuls."
author: "Marcelo (qwexvf)"
inputs:
  VULS_VERSION:
    description: "Specify the version fo vuls"
    default: "latest"
    required: false
  TRIVY_VERSION:
    description: "Specify the version for trivy"
    default: "latest"
    required: false
  TRIVY_GLOBAL_OPTIONS:
    description: "Pass any string options to trivy cli"
    required: false
  TRIVY_IMAGE_OPTIONS:
    description: "Pass any string options to trivy image cli"
    required: false
  DOCKERFILE_PATH:
    description: "docker/anything/Dockerfile"
    required: true
  IMAGE_NAME:
    description: "fvuls/trivy-scan"
    required: true
  FVULS_TOKEN:
    description: "xxxxxxxx"
    required: true
  FVULS_AUTH_URL:
    description: "Specify one time auth URL for vuls."
    default: "https://auth.vuls.biz/one-time-auth"
    required: true
  FVULS_GROUP_ID:
    description: "Group ID"
    required: true
  FVULS_SERVER_UUID:
    description: "xxxxxxxx"
    required: true
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v2
    - name: cached scan db
      uses: actions/cache@v2
      with:
        path: vulndb/
        key: trivy-vulndb
    - name: Install trivy
      run: |
        if [ "${{ inputs.TRIVY_VERSION }}" == "latest" ]; then
          export LATEST_VERSION=$(curl --silent "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | jq -r .tag_name) | cut -c 2-
          echo $LATEST_VERSION
          wget -nv "https://github.com/aquasecurity/trivy/releases/download/v${LATEST_VERSION}/trivy_${LATEST_VERSION}_Linux-64bit.tar.gz"
          tar zxvf "trivy_${LATEST_VERSION}_Linux-64bit.tar.gz"
        else
          wget -nv https://github.com/aquasecurity/trivy/releases/download/v${{ inputs.TRIVY_VERSION }}/trivy_${{ inputs.TRIVY_VERSION }}_Linux-64bit.tar.gz
          tar zxvf trivy_${{ inputs.TRIVY_VERSION }}_Linux-64bit.tar.gz
        fi
      shell: bash
    - name: Install trivy-to-vuls
      run: |
        if [ "${{ inputs.VULS_VERSION }}" == "latest" ]; then
          export LATEST_VERSION=$(curl --silent "https://api.github.com/repos/future-architect/vuls/releases/latest" | jq -r .tag_name) | cut -c 2-
          wget -nv https://github.com/future-architect/vuls/releases/download/v${LATEST_VERSION}/trivy-to-vuls_${LATEST_VERSION}_linux_amd64.tar.gz
          tar zxvf trivy-to-vuls_${LATEST_VERSION}_linux_amd64.tar.gz
        else
          wget -nv https://github.com/future-architect/vuls/releases/download/v${{ inputs.VULS_VERSION }}/trivy-to-vuls_${{ inputs.VULS_VERSION }}_linux_amd64.tar.gz
          tar zxvf trivy-to-vuls_${{ inputs.VULS_VERSION }}_linux_amd64.tar.gz
        fi
      shell: bash
    - name: Install future-vuls
      run: |
        if [ "${{ inputs.VULS_VERSION }}" == "latest" ]; then
          export LATEST_VERSION=$(curl --silent "https://api.github.com/repos/future-architect/vuls/releases/latest" | jq -r .tag_name) | cut -c 2-
          wget -nv https://github.com/future-architect/vuls/releases/download/v${LATEST_VERSION}/future-vuls_${LATEST_VERSION}_linux_amd64.tar.gz
          tar zxvf future-vuls_${LATEST_VERSION}_linux_amd64.tar.gz
        else
          wget -nv https://github.com/future-architect/vuls/releases/download/v${{ inputs.VULS_VERSION }}/future-vuls_${{ inputs.VULS_VERSION }}_linux_amd64.tar.gz
          tar zxvf future-vuls_${{ inputs.VULS_VERSION }}_linux_amd64.tar.gz
        fi
      shell: bash
    - name: Scan Dockerfile by trivy
      run: |
        docker build . -f ${{ inputs.DOCKERFILE_PATH }} -t ${{ inputs.IMAGE_NAME }}
        set -eo pipefail
        ./trivy -q ${{ inputs.TRIVY_GLOBAL_OPTIONS }} --cache-dir vulndb/ image ${{ inputs.TRIVY_IMAGE_OPTIONS }} -f=json ${{ inputs.IMAGE_NAME }} | \
        ./trivy-to-vuls parse --stdin | \
        ./future-vuls upload --stdin --url ${{ inputs.FVULS_AUTH_URL }} --group-id ${{ inputs.FVULS_GROUP_ID }}  --token ${{ inputs.FVULS_TOKEN }}  --uuid ${{ inputs.FVULS_SERVER_UUID }}
      shell: bash
